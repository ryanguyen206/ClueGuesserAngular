{"ast":null,"code":"import { PUZZLEWORDS } from '../wordlist';\nimport { Puzzle } from '../Puzzle';\nimport { shuffle } from '../Shuffle';\nimport { MongoPuzzle } from '../MongoPuzzle';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction PuzzleCreationGridComponent_h2_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const word_r1 = ctx.$implicit;\n    i0.ɵɵclassMap(word_r1.answerClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(word_r1.name);\n  }\n}\n\nexport let PuzzleCreationGridComponent = /*#__PURE__*/(() => {\n  class PuzzleCreationGridComponent {\n    constructor(http) {\n      this.http = http; //shuffling all of the words, then taking first 25.\n\n      this.selectedWords = shuffle(PUZZLEWORDS).splice(1, 25); //after shuffling, assign each card correct, incorrect, bomb, randomID, numberOfCorrectAnswers. Essentially setting up the main structure of the puzzle.\n\n      this.puzzle = new Puzzle(this.selectedWords);\n      this.clue = '';\n    }\n\n    ngOnInit() {// Initialization logic here (if needed)\n    }\n\n    submitClue() {\n      let mongoPuzzle = new MongoPuzzle(this.puzzle, this.clue);\n      this.http.get('https://clueguessernodeserver.azurewebsites.net/users').subscribe( // this.http.get<any>('http://localhost:3000/users').subscribe(\n      response => {\n        for (let i = 0; i < response.length; i++) {\n          if (response[i].email == sessionStorage.getItem(\"Email:\")) {\n            mongoPuzzle.userId = response[i]._id;\n            this.submitPuzzle(mongoPuzzle);\n          }\n        }\n      });\n    }\n\n    submitPuzzle(mongoPuzzle) {\n      this.http.post('https://clueguessernodeserver.azurewebsites.net/puzzle', mongoPuzzle) // this.http.post<any>('http://localhost:3000/puzzle', mongoPuzzle)\n      .subscribe(response => {\n        // Handle the response from the server here\n        console.log('POST request successful:', response);\n      }, error => {\n        // Handle any errors here\n        console.error('POST request error:', error);\n      });\n    }\n\n  }\n\n  PuzzleCreationGridComponent.ɵfac = function PuzzleCreationGridComponent_Factory(t) {\n    return new (t || PuzzleCreationGridComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  PuzzleCreationGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PuzzleCreationGridComponent,\n    selectors: [[\"app-puzzle-creation-grid\"]],\n    decls: 9,\n    vars: 2,\n    consts: [[1, \"flex-container\"], [1, \"grid\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [\"htmlFor\", \"clue\"], [\"id\", \"clue\", \"type\", \"text\", \"placeholder\", \"Enter text...\", \"autocomplete\", \"off\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"cluebutton\", 3, \"click\"]],\n    template: function PuzzleCreationGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, PuzzleCreationGridComponent_h2_2_Template, 2, 4, \"h2\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\")(4, \"label\", 3);\n        i0.ɵɵtext(5, \"Enter a Clue: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function PuzzleCreationGridComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.clue = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function PuzzleCreationGridComponent_Template_button_click_7_listener() {\n          return ctx.submitClue();\n        });\n        i0.ɵɵtext(8, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.puzzle.cardComponents);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.clue);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\".flex-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center}.grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(5,0fr);margin:0 auto}h2[_ngcontent-%COMP%]{text-align:center;padding:50px;margin:5px;min-width:250px}.bomb[_ngcontent-%COMP%]{background-color:#b2b7be}.incorrect[_ngcontent-%COMP%]{background-color:#f23f43}.correct[_ngcontent-%COMP%]{background-color:#23a559}#clue[_ngcontent-%COMP%], #cluebutton[_ngcontent-%COMP%]{color:#000}\"]\n  });\n  return PuzzleCreationGridComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}